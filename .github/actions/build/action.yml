name: Build action
description: Build action
inputs:
  arch:
    description: 'Target architecture (x64 or x86)'
    required: true
    default: 'x64'
runs:
  using: "composite"
  steps:
    - name: Create Dir
      shell: nu {0}
      run: |
        let arch = "${{ inputs.arch }}"
        mkdir skiasharp $env.BuildDir
        
        # Copy appropriate args.gn based on architecture
        if ($arch == "x86") {
            if (("args_x86.gn" | path exists)) {
                cp args_x86.gn $"($env.BuildDir)/args.gn"
            } else {
                cp args.gn $"($env.BuildDir)/args.gn"
                # Update target_cpu for x86
                open $"($env.BuildDir)/args.gn" | str replace 'target_cpu = "x64"' 'target_cpu = "x86"' | save $"($env.BuildDir)/args.gn"
            }
        } else {
            cp args.gn $"($env.BuildDir)/args.gn"
        }

    - name: Clone source
      shell: nu {0}
      run: |
        cd skiasharp
        git init
        git remote add origin https://github.com/mono/SkiaSharp.git
        git fetch --depth 1 origin $"release/($env.SkiaSharpVersion)"
        git checkout --recurse-submodules -q FETCH_HEAD
        git submodule update --init --depth 1

    - name: Restore source cache
      uses: actions/cache/restore@v4
      id: restore-src-cache
      with:
        path: |
          skiasharp/externals/skia/third_party
        key: ${{ runner.os }}-src-cache-${{ env.SkiaSharpVersion }}

    - name: Prepare build skia
      shell: nu {0}
      # Python 3.13 removed 'pipes' module, so we use 3.12 instead.
      run: |
        cd skiasharp/externals/skia
        uv run --python 3.12 -- python tools/git-sync-deps
        gn gen $env.BuildDir

    - name: Save src cache immediately
      id: save-src-cache
      if: always() && steps.restore-src-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.restore-src-cache.outputs.cache-primary-key }}
        path: |
          skiasharp/externals/skia/third_party

    - name: Build skia
      shell: nu {0}
      run: |
        cd skiasharp/externals/skia
        autoninja -C $env.BuildDir skia SkiaSharp

    - name: Build libHarfBuzzSharp
      shell: pwsh
      working-directory: ${{github.workspace}}
      run: |
        cd skiasharp/native/windows/libHarfBuzzSharp

        $arch = "${{ inputs.arch }}"
        $platform = if ($arch -eq "x86") { "Win32" } else { "x64" }

        # For x86, we need stdcall exports but cdecl callbacks
        # Patch HarfBuzz headers to explicitly mark callback types as __cdecl
        if ($arch -eq "x86") {
            Write-Host "Patching HarfBuzz headers for x86 stdcall build with cdecl callbacks"
            
            $hbCommonPath = "../../../externals/skia/third_party/externals/harfbuzz/src/hb-common.h"
            if (Test-Path $hbCommonPath) {
                $content = Get-Content $hbCommonPath -Raw
                # Add __cdecl to hb_destroy_func_t typedef
                $content = $content -replace '(typedef\s+void\s+\()\s*(\*\s*hb_destroy_func_t\s*\))', '$1__cdecl $2'
                # Add __cdecl to hb_user_data_key_t callback if present
                $content = $content -replace '(typedef\s+void\s+\()\s*(\*\s*hb_[a-z_]*_func_t\s*\))', '$1__cdecl $2'
                Set-Content $hbCommonPath -Value $content -NoNewline
                Write-Host "Patched $hbCommonPath to use __cdecl for callback typedefs"
            }

            # Create Directory.Build.props to set CallingConvention=StdCall for exports
            $propsPath = Join-Path -Path (Get-Location) -ChildPath "Directory.Build.props"
            $xml = "<Project>`n  <ItemDefinitionGroup Condition=`"'`$(Configuration)|`$(Platform)'=='Release|Win32'`">`n    <ClCompile>`n      <CallingConvention>StdCall</CallingConvention>`n    </ClCompile>`n  </ItemDefinitionGroup>`n</Project>"
            Set-Content -Path $propsPath -Value $xml -NoNewline -Encoding UTF8
            Write-Host "Created $propsPath to set CallingConvention=StdCall (/Gz) for Release|Win32"
        }

        $msbuildProps = @(
            "Configuration=Release"
            "Platform=$platform"
            "ConfigurationType=StaticLibrary"
            "WindowsTargetPlatformVersion=$env:UCRTVersion"
            "PlatformToolset=v143"
            "OutDir=$env:BuildDir"
        ) -join ";"

        msbuild -m -t:rebuild "-p:$msbuildProps" -v:n

        # Verify the lib has stdcall symbols for x86
        if ($arch -eq "x86") {
            Write-Host "`n=== Verifying libHarfBuzzSharp.lib calling convention ==="
            $libPath = Join-Path -Path $env:BuildDir -ChildPath "libHarfBuzzSharp.lib"
            if (Test-Path $libPath) {
                & dumpbin /SYMBOLS $libPath | Select-String "hb_blob_create" | Select-Object -First 3 | ForEach-Object {
                    Write-Host $_.Line
                }
                Write-Host "Expected: _hb_blob_create@20 (stdcall) for x86"
            } else {
                Write-Warning "libHarfBuzzSharp.lib not found at $libPath"
            }
        }

    - name: Package libSkiaSharp
      shell: nu {0}
      working-directory: ${{env.BuildDir}}
      run: |
        ls
        7z a -y -mx9 $"($env.SkiaSharpName).7z" skia.lib SkiaSharp.lib
        mv $"($env.SkiaSharpName).7z" $env.GITHUB_WORKSPACE

    - name: Package libHarfBuzzSharp
      shell: nu {0}
      working-directory: ${{env.BuildDir}}
      run: |
        7z a -y -mx9 $"($env.HarfBuzzSharpName).7z" ./libHarfBuzzSharp.*
        mv $"($env.HarfBuzzSharpName).7z" $env.GITHUB_WORKSPACE
